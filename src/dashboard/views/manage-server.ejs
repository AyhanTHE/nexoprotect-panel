<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestion de <%= typeof guild !== 'undefined' ? guild.name : 'Serveur' %></title>
    <link rel="stylesheet" href="/css/manage.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">
</head>
<body>
    <div class="manage-layout">
        <aside class="manage-sidebar">
            <div class="sidebar-header">
                <% if (typeof guild !== 'undefined' && guild) { %>
                    <img src="<%= guild.icon ? `https://cdn.discordapp.com/icons/${guild.id}/${guild.icon}.png` : '/images/default-icon.png' %>" alt="Icône du serveur" class="server-icon-large">
                    <h2 class="server-name-large"><%= guild.name %></h2>
                <% } else { %>
                    <div class="server-icon-large" style="background-color: #333;"></div>
                    <h2 class="server-name-large">Erreur...</h2>
                <% } %>
            </div>
            
            <nav class="manage-nav">
                <a href="#" class="nav-category active" data-tab="tab-dashboard"><i class="fas fa-tachometer-alt"></i><span>Tableau de bord</span></a>
                <div class="nav-divider"></div>
                <h3 class="nav-title">Modules</h3>
                <a href="#" class="nav-category" data-tab="tab-welcome"><i class="fas fa-users"></i><span>Arrivées & Départs</span></a>
                <a href="#" class="nav-category" data-tab="tab-autorole"><i class="fas fa-user-tag"></i><span>Rôles automatiques</span></a>
                <a href="#" class="nav-category" data-tab="tab-automod"><i class="fas fa-robot"></i><span>Auto-Modération</span></a>
                <a href="#" class="nav-category" data-tab="tab-moderation"><i class="fas fa-shield-alt"></i><span>Modération</span></a>
            </nav>

            <div class="user-profile-section">
                <% if (typeof user !== 'undefined' && user) { %>
                    <div class="profile-info">
                        <img src="https://cdn.discordapp.com/avatars/<%= user.id %>/<%= user.avatar %>.png?size=64" alt="Avatar" class="profile-avatar-small">
                        <div class="profile-text">
                            <span class="profile-name"><%= user.username %></span>
                            <span class="profile-grade <%= user.grade === 'VIP' ? 'vip' : '' %>"><i class="fas <%= user.grade === 'VIP' ? 'fa-crown' : 'fa-user' %>"></i> <%= user.grade %></span>
                        </div>
                    </div>
                <% } %>
                <a href="/dashboard" class="btn-back"><i class="fas fa-arrow-left"></i><span>Retour aux serveurs</span></a>
            </div>
        </aside>

        <main class="manage-main-content">
            <div id="tab-dashboard" class="tab-content active">
                <header class="manage-header"><h1>Tableau de bord</h1><p>Vue d'ensemble et statistiques du serveur.</p></header>
                
                <% if (typeof guild !== 'undefined' && guild) { %>
                <div class="dashboard-grid">
                    <div class="dashboard-card main-info-card">
                        <img src="<%= guild.icon ? `https://cdn.discordapp.com/icons/${guild.id}/${guild.icon}.png?size=256` : '/images/default-icon.png' %>" alt="Icône du serveur" class="server-main-icon">
                        <div class="server-main-details">
                            <h2><%= guild.name %></h2>
                            <p class="server-id">ID: <%= guild.id %></p>
                            <div class="owner-info">
                                <i class="fas fa-crown"></i>
                                <span>Propriétaire : <%= guild.owner ? guild.owner.username : 'Inconnu' %></span>
                            </div>
                        </div>
                    </div>

                    <div class="dashboard-card stat-card">
                        <i class="fas fa-users"></i>
                        <div class="stat-details">
                            <span class="stat-value"><%= guild.memberCount || 'N/A' %></span>
                            <span class="stat-label">Membres</span>
                        </div>
                    </div>
                    <div class="dashboard-card stat-card">
                        <i class="fas fa-hashtag"></i>
                        <div class="stat-details">
                            <span class="stat-value"><%= channels.length || 'N/A' %></span>
                            <span class="stat-label">Salons</span>
                        </div>
                    </div>
                    <div class="dashboard-card stat-card">
                        <i class="fas fa-tags"></i>
                        <div class="stat-details">
                            <span class="stat-value"><%= roles.length || 'N/A' %></span>
                            <span class="stat-label">Rôles</span>
                        </div>
                    </div>
                    <div class="dashboard-card stat-card">
                        <i class="fas fa-calendar-alt"></i>
                        <div class="stat-details">
                            <span class="stat-value"><%= new Date(guild.createdTimestamp).toLocaleDateString('fr-FR') %></span>
                            <span class="stat-label">Créé le</span>
                        </div>
                    </div>
                </div>
                <% } else { %>
                    <p>Les informations du serveur n'ont pas pu être chargées.</p>
                <% } %>
            </div>

            <div id="tab-welcome" class="tab-content">
                <header class="manage-header">
                    <h1>Arrivées et départs</h1>
                    <p>Configurez ici les messages de bienvenue et d'au revoir pour votre serveur.</p>
                </header>
                <form id="welcome-settings-form" data-form-name="welcome">
                    <details class="module-accordion" open>
                        <summary class="module-summary">
                            <div class="summary-title"><i class="fas fa-hand-sparkles"></i><h3>Messages de Bienvenue</h3></div>
                            <label class="switch"><input type="checkbox" name="welcomeEnabled" <%= (settings.welcome && settings.welcome.enabled) ? 'checked' : '' %>><span class="slider round"></span></label>
                        </summary>
                        <div class="module-content">
                             <div class="settings-grid">
                                 <div class="settings-column">
                                     <label for="welcome-channel">Salon des messages de bienvenue</label>
                                     <select id="welcome-channel" name="welcomeChannelId" class="select-box">
                                         <option value="">Désactivé</option>
                                         <% channels.forEach(channel => { %>
                                             <option value="<%= channel.id %>" <%= (settings.welcome && settings.welcome.channelId === channel.id) ? 'selected' : '' %>>#<%= channel.name %></option>
                                         <% }); %>
                                     </select>
                                     <label for="welcome-message">Message personnalisé</label>
                                     <textarea id="welcome-message" name="welcomeMessage" class="textarea-box" placeholder="Ex: Bienvenue {user.username} !"><%= settings.welcome ? settings.welcome.message : '' %></textarea>
                                     <label>Bannière de bienvenue</label>
                                     <% if (user.grade === 'VIP') { %>
                                         <div class="setting-vip-upload">
                                             <input type="file" id="banner-upload-input" accept="image/png, image/jpeg, image/gif" style="display: none;">
                                             <input type="hidden" name="welcomeBannerUrl" id="banner-base64-input" value="<%= settings.welcome ? settings.welcome.bannerUrl : '' %>">
                                             <button type="button" class="btn-upload" onclick="document.getElementById('banner-upload-input').click()"><i class="fas fa-upload"></i> Importer une image</button>
                                             <div id="banner-preview" class="<%= (settings.welcome && settings.welcome.bannerUrl) ? '' : 'hidden' %>"><img src="<%= settings.welcome ? settings.welcome.bannerUrl : '' %>" alt="Aperçu de la bannière"></div>
                                         </div>
                                     <% } else { %>
                                         <div class="setting-locked"><p>Cette fonctionnalité est réservée aux membres VIP.</p><button type="button" class="btn-vip-upgrade"><i class="fas fa-star"></i> Devenir VIP</button></div>
                                     <% } %>
                                 </div>
                                 <div class="preview-column">
                                      <label>Prévisualisation</label>
                                      <div class="discord-preview"><div class="discord-message"><img src="https://cdn.discordapp.com/embed/avatars/1.png" class="discord-avatar" alt="avatar"><div class="discord-message-content"><div class="discord-user-info"><span class="discord-username">NexoProtect</span><span class="discord-bot-tag">APP</span></div><div class="discord-text"><p>Ho ! Un nouveau membre !</p><p>✨ Bienvenue, <%= user.username %> ! ✨</p></div></div></div></div>
                                 </div>
                             </div>
                        </div>
                    </details>
                </form>
            </div>

            <div id="tab-autorole" class="tab-content">
                <header class="manage-header"><h1>Rôles automatiques</h1><p>Définissez quels rôles attribuer automatiquement aux nouveaux membres.</p></header>
                <form id="autorole-settings-form" data-form-name="autorole">
                    <div class="settings-box">
                        <div class="box-header">
                            <h3>Rôles à l'arrivée</h3>
                            <label class="switch"><input type="checkbox" name="autoroleEnabled" <%= (settings.autorole && settings.autorole.enabled) ? 'checked' : '' %>><span class="slider round"></span></label>
                        </div>
                        <p class="box-description">Attribuez un ou plusieurs rôles aux membres dès leur arrivée.</p>
                        
                        <div class="role-selector-wrapper">
                            <div class="selected-roles-container" id="selected-roles-container">
                                </div>
                            <input type="text" id="role-search-input" placeholder="Chercher ou sélectionner un rôle...">
                            <div class="role-search-results" id="role-search-results">
                                </div>
                        </div>
                        
                        <input type="hidden" name="autoroleRoles" id="autorole-roles-input" value="<%= (settings.autorole && settings.autorole.roles) ? settings.autorole.roles.join(',') : '' %>">
                    </div>
                </form>
            </div>
            
            <div id="tab-automod" class="tab-content">
                <header class="manage-header"><h1>Auto-Modération</h1><p>Ce module est en cours de développement.</p></header>
            </div>
            
            <div id="tab-moderation" class="tab-content">
                <header class="manage-header"><h1>Modération</h1><p>Ce module est en cours de développement.</p></header>
            </div>
        </main>
    </div>

    <div class="save-bar" id="save-bar">
        <p id="save-status">Des changements non sauvegardés.</p>
        <button type="button" id="save-button" class="btn-save"><i class="fas fa-save"></i> Enregistrer</button>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // --- CORRECTION POUR L'ÉDITEUR DE TEXTE ---
            // On injecte les données dans une chaîne de caractères, puis on la parse.
            const allServerRolesJSON = '<%- JSON.stringify(roles) %>';
            const allServerRoles = JSON.parse(allServerRolesJSON);
    
            // --- GESTION DES ONGLETS ---
            const tabs = document.querySelectorAll('.nav-category');
            const contents = document.querySelectorAll('.tab-content');
            
            const activateTab = (tabEl) => {
              if(!tabEl) return;
              tabs.forEach(t => t.classList.remove('active'));
              contents.forEach(c => c.classList.remove('active'));
              tabEl.classList.add('active');
              const targetId = tabEl.getAttribute('data-tab');
              document.getElementById(targetId)?.classList.add('active');
            }

            tabs.forEach(tab => {
                tab.addEventListener('click', (e) => {
                    e.preventDefault();
                    activateTab(tab);
                });
            });
            activateTab(document.querySelector('.nav-category.active'));


            // --- BARRE DE SAUVEGARDE ---
            const saveBar = document.getElementById('save-bar');
            const showSaveBar = () => {
                if(saveBar) {
                    saveBar.classList.add('visible');
                    document.getElementById('save-status').textContent = 'Des changements non sauvegardés.';
                }
            }
            document.querySelectorAll('form').forEach(form => form.addEventListener('input', showSaveBar));


            // --- NOUVELLE LOGIQUE POUR LE SÉLECTEUR DE RÔLES ---
            const searchInput = document.getElementById('role-search-input');
            const resultsContainer = document.getElementById('role-search-results');
            const selectedContainer = document.getElementById('selected-roles-container');
            const hiddenInput = document.getElementById('autorole-roles-input');

            const selectedRoles = new Set(hiddenInput.value ? hiddenInput.value.split(',') : []);

            const updateSelectedDisplay = () => {
                selectedContainer.innerHTML = '';
                selectedRoles.forEach(roleId => {
                    const role = allServerRoles.find(r => r.id === roleId);
                    if (role) {
                        const pill = document.createElement('div');
                        pill.className = 'role-pill';
                        pill.dataset.roleId = role.id;
                        
                        const colorSpan = document.createElement('span');
                        colorSpan.className = 'role-pill-color';
                        colorSpan.style.backgroundColor = role.color;
                        pill.appendChild(colorSpan);

                        const nameSpan = document.createElement('span');
                        nameSpan.textContent = role.name;
                        pill.appendChild(nameSpan);

                        const removeBtn = document.createElement('button');
                        removeBtn.type = 'button';
                        removeBtn.className = 'remove-role-btn';
                        removeBtn.innerHTML = '&times;';
                        removeBtn.onclick = () => removeRole(role.id);
                        pill.appendChild(removeBtn);

                        selectedContainer.appendChild(pill);
                    }
                });
                hiddenInput.value = Array.from(selectedRoles).join(',');
            };

            const removeRole = (roleId) => {
                selectedRoles.delete(roleId);
                updateSelectedDisplay();
                showSaveBar();
            };

            const addRole = (roleId) => {
                const role = allServerRoles.find(r => r.id === roleId);
                if (role && !role.canManage) {
                    alert("Le bot n'a pas les permissions pour gérer ce rôle.");
                    return;
                }
                selectedRoles.add(roleId);
                updateSelectedDisplay();
                searchInput.value = '';
                resultsContainer.classList.remove('visible');
                showSaveBar();
            };

            const showResults = () => {
                const searchTerm = searchInput.value.toLowerCase();
                const filteredRoles = allServerRoles.filter(role => 
                    !selectedRoles.has(role.id) && role.name.toLowerCase().includes(searchTerm)
                );
                
                resultsContainer.innerHTML = '';
                if (filteredRoles.length === 0) {
                    resultsContainer.innerHTML = '<div class="result-item disabled">Aucun rôle trouvé</div>';
                } else {
                    filteredRoles.forEach(role => {
                        const item = document.createElement('div');
                        item.className = 'result-item';
                        if (!role.canManage) {
                            item.classList.add('disabled');
                            item.title = "Le bot ne peut pas gérer ce rôle.";
                        } else {
                           item.onclick = () => addRole(role.id);
                        }
                        
                        const colorSpan = document.createElement('span');
                        colorSpan.className = 'role-pill-color';
                        colorSpan.style.backgroundColor = role.color;
                        item.appendChild(colorSpan);
                        item.append(role.name);

                        resultsContainer.appendChild(item);
                    });
                }
                resultsContainer.classList.add('visible');
            };

            searchInput.addEventListener('input', showResults);
            searchInput.addEventListener('focus', showResults);
            document.addEventListener('click', (e) => {
                if (!e.target.closest('.role-selector-wrapper')) {
                    resultsContainer.classList.remove('visible');
                }
            });
            updateSelectedDisplay();


            // --- LOGIQUE DE SAUVEGARDE (Inchangée) ---
            const saveButton = document.getElementById('save-button');
            if(saveButton) {
                saveButton.addEventListener('click', async () => {
                    saveButton.disabled = true;
                    saveButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Enregistrement...';
                    const guildId = window.location.pathname.split('/').pop();
                    const promises = [];
                    document.querySelectorAll('form').forEach(form => {
                        const formName = form.getAttribute('data-form-name');
                        if (!formName) return;
                        let formData = {};
                        if (formName === 'welcome') {
                            formData = {
                                enabled: form.querySelector('[name=welcomeEnabled]').checked,
                                channelId: form.querySelector('[name=welcomeChannelId]').value,
                                message: form.querySelector('[name=welcomeMessage]').value,
                                bannerUrl: form.querySelector('[name=welcomeBannerUrl]') ? form.querySelector('[name=welcomeBannerUrl]').value : null,
                            };
                        } else if (formName === 'autorole') {
                            formData = {
                                enabled: form.querySelector('[name=autoroleEnabled]').checked,
                                roles: form.querySelector('[name=autoroleRoles]').value.split(',').filter(Boolean) 
                            };
                        }
                        promises.push(fetch(`/api/settings/${guildId}/${formName}`, { 
                            method: 'POST', 
                            headers: { 'Content-Type': 'application/json' }, 
                            body: JSON.stringify(formData) 
                        }));
                    });
                    try {
                        await Promise.all(promises);
                        document.getElementById('save-status').textContent = 'Changements enregistrés !';
                        if(saveBar) setTimeout(() => saveBar.classList.remove('visible'), 2000);
                    } catch (error) {
                        document.getElementById('save-status').textContent = 'Une erreur est survenue.';
                    } finally {
                        setTimeout(() => {
                            saveButton.disabled = false;
                            saveButton.innerHTML = '<i class="fas fa-save"></i> Enregistrer';
                        }, 2500);
                    }
                });
            }

            // --- LOGIQUE POUR L'IMPORT D'IMAGE (Inchangée) ---
            const bannerInput = document.getElementById('banner-upload-input');
            if (bannerInput) {
                // ... (code de la bannière inchangé)
            }
        });
    </script>
</body>
</html>