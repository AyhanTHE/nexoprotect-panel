<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestion de <%= typeof guild !== 'undefined' ? guild.name : 'Serveur' %></title>
    <link rel="stylesheet" href="/css/manage.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">
    <link rel="icon" href="/images/logo.png" type="image/png"> 
</head>
<body>
    <div class="manage-layout">
        <aside class="manage-sidebar">
            <div class="sidebar-header">
                <% if (typeof guild !== 'undefined' && guild) { %>
                    <img src="<%= guild.icon ? `https://cdn.discordapp.com/icons/${guild.id}/${guild.icon}.png` : '/images/default-icon.png' %>" alt="Icône du serveur" class="server-icon-large">
                    <h2 class="server-name-large"><%= guild.name %></h2>
                <% } else { %>
                    <div class="server-icon-large" style="background-color: #333;"></div>
                    <h2 class="server-name-large">Erreur...</h2>
                <% } %>
            </div>
            
            <nav class="manage-nav">
                <a href="#" class="nav-category active" data-tab="tab-dashboard"><i class="fas fa-tachometer-alt"></i><span>Tableau de bord</span></a>
                <div class="nav-divider"></div>
                <h3 class="nav-title">Modules</h3>
                <a href="#" class="nav-category" data-tab="tab-welcome"><i class="fas fa-users"></i><span>Arrivées & Départs</span></a>
                <a href="#" class="nav-category" data-tab="tab-automod"><i class="fas fa-robot"></i><span>Auto-Modération</span></a>
                <a href="#" class="nav-category" data-tab="tab-moderation"><i class="fas fa-shield-alt"></i><span>Modération</span></a>
            </nav>

            <div class="user-profile-section">
                <% if (typeof user !== 'undefined' && user) { %>
                    <div class="profile-info">
                        <img src="https://cdn.discordapp.com/avatars/<%= user.id %>/<%= user.avatar %>.png?size=64" alt="Avatar" class="profile-avatar-small">
                        <div class="profile-text">
                            <span class="profile-name"><%= user.username %></span>
                            <span class="profile-grade <%= user.grade === 'VIP' ? 'vip' : '' %>"><i class="fas <%= user.grade === 'VIP' ? 'fa-crown' : 'fa-user' %>"></i> <%= user.grade %></span>
                        </div>
                    </div>
                <% } %>
                <a href="/dashboard" class="btn-back"><i class="fas fa-arrow-left"></i><span>Retour aux serveurs</span></a>
            </div>
        </aside>

        <main class="manage-main-content">
            <div id="tab-dashboard" class="tab-content active">
                <header class="manage-header"><h1>Tableau de bord</h1><p>Vue d'ensemble et statistiques du serveur.</p></header>
                <% if (typeof guild !== 'undefined' && guild) { %>
                <div class="dashboard-grid">
                    <div class="dashboard-card main-info-card">
                        <img src="<%= guild.icon ? `https://cdn.discordapp.com/icons/${guild.id}/${guild.icon}.png?size=256` : '/images/default-icon.png' %>" alt="Icône du serveur" class="server-main-icon">
                        <div class="server-main-details">
                            <h2><%= guild.name %></h2>
                            <p class="server-id">ID: <%= guild.id %></p>
                            <div class="owner-info">
                                <i class="fas fa-crown"></i>
                                <span>Propriétaire : <%= guild.owner ? guild.owner.username : 'Inconnu' %></span>
                            </div>
                        </div>
                    </div>
                    <div class="dashboard-card stat-card">
                        <i class="fas fa-users"></i>
                        <div class="stat-details">
                            <span class="stat-value"><%= guild.memberCount || 'N/A' %></span>
                            <span class="stat-label">Membres</span>
                        </div>
                    </div>
                    <div class="dashboard-card stat-card">
                        <i class="fas fa-hashtag"></i>
                        <div class="stat-details">
                            <span class="stat-value"><%= channels.length || 'N/A' %></span>
                            <span class="stat-label">Salons</span>
                        </div>
                    </div>
                    <div class="dashboard-card stat-card">
                        <i class="fas fa-tags"></i>
                        <div class="stat-details">
                            <span class="stat-value"><%= roles.length || 'N/A' %></span>
                            <span class="stat-label">Rôles</span>
                        </div>
                    </div>
                    <div class="dashboard-card stat-card">
                        <i class="fas fa-calendar-alt"></i>
                        <div class="stat-details">
                            <span class="stat-value"><%= new Date(guild.createdTimestamp).toLocaleDateString('fr-FR') %></span>
                            <span class="stat-label">Créé le</span>
                        </div>
                    </div>
                </div>
                <% } else { %><p>Les informations du serveur n'ont pas pu être chargées.</p><% } %>
            </div>

            <div id="tab-welcome" class="tab-content">
                <header class="manage-header">
                    <h1>Arrivées et départs</h1>
                    <p>Configurez ici les messages de bienvenue et d'au revoir pour votre serveur.</p>
                </header>
                <form id="welcome-settings-form" data-form-name="welcome">
                    <details class="module-accordion <%= (settings.welcome && settings.welcome.enabled) ? 'is-enabled' : '' %>" open>
                        <summary class="module-summary">
                            <div class="summary-title"><i class="fas fa-hand-sparkles"></i><h3>Messages de Bienvenue</h3></div>
                            <label class="switch"><input type="checkbox" name="welcomeEnabled" class="module-toggle-switch" <%= (settings.welcome && settings.welcome.enabled) ? 'checked' : '' %>><span class="slider round"></span></label>
                        </summary>
                        <div class="module-body">
                            <div class="settings-grid">
                                <div class="settings-column">
                                    <label for="welcome-channel">Salon des messages de bienvenue</label>
                                    <select id="welcome-channel" name="welcomeChannelId" class="select-box">
                                        <option value="">Désactivé</option>
                                        <% channels.forEach(channel => { %>
                                            <option value="<%= channel.id %>" <%= (settings.welcome && settings.welcome.channelId === channel.id) ? 'selected' : '' %>>#<%= channel.name %></option>
                                        <% }); %>
                                    </select>
                                    <label for="welcome-message">Message personnalisé</label>
                                    <textarea id="welcome-message" name="welcomeMessage" class="textarea-box" placeholder="Ex: Bienvenue {user.username} !"><%= settings.welcome ? settings.welcome.message : '' %></textarea>
                                    <label>Bannière de bienvenue</label>
                                    <% if (user.grade === 'VIP') { %>
                                        <div class="setting-vip-upload">
                                            <input type="file" id="banner-upload-input" accept="image/png, image/jpeg, image/gif" style="display: none;">
                                            <input type="hidden" name="welcomeBannerUrl" id="banner-base64-input" value="<%= settings.welcome ? settings.welcome.bannerUrl : '' %>">
                                            <button type="button" class="btn-upload" onclick="document.getElementById('banner-upload-input').click()"><i class="fas fa-upload"></i> Importer une image</button>
                                            <div id="banner-preview" class="<%= (settings.welcome && settings.welcome.bannerUrl) ? '' : 'hidden' %>"><img src="<%= settings.welcome ? settings.welcome.bannerUrl : '' %>" alt="Aperçu de la bannière"></div>
                                        </div>
                                    <% } else { %>
                                        <div class="setting-locked"><p>Cette fonctionnalité est réservée aux membres VIP.</p><button type="button" class="btn-vip-upgrade"><i class="fas fa-star"></i> Devenir VIP</button></div>
                                    <% } %>
                                </div>
                                <div class="preview-column">
                                    <label>Prévisualisation</label>
                                    <div class="discord-preview">
                                        <div class="discord-message">
                                            <img src="https://cdn.discordapp.com/embed/avatars/1.png" class="discord-avatar" alt="avatar">
                                            <div class="discord-message-content">
                                                <div class="discord-user-info">
                                                    <span class="discord-username">NexoProtect</span>
                                                    <span class="discord-bot-tag">APP</span>
                                                </div>
                                                <div class="discord-text">
                                                    <p>Ho ! Un nouveau membre !</p>
                                                    <p>✨ Bienvenue, <%= user.username %> ! ✨</p>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </details>
                </form>
            </div>

            <div id="tab-automod" class="tab-content"><header class="manage-header"><h1>Auto-Modération</h1><p>Ce module est en cours de développement.</p></header></div>
            <div id="tab-moderation" class="tab-content"><header class="manage-header"><h1>Modération</h1><p>Ce module est en cours de développement.</p></header></div>
        </main>
    </div>

    <div class="save-bar" id="save-bar">
        <p id="save-status">Des changements non sauvegardés.</p>
        <button type="button" id="save-button" class="btn-save"><i class="fas fa-save"></i> Enregistrer</button>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // allServerRoles n'est plus nécessaire car le module autorole est supprimé.
            // On peut le garder vide ou le supprimer complètement si aucune autre partie ne l'utilise.
            // Pour la sécurité, on le garde en tant que tableau vide.
            const allServerRolesJSON = '<%- JSON.stringify([]) %>'; // Toujours un JSON valide d'un tableau vide
            let allServerRoles = [];
            try {
                allServerRoles = JSON.parse(allServerRolesJSON);
            } catch (e) {
                console.error("Erreur lors du parsing des rôles du serveur (JSON malformé ?):", e);
                console.error("La chaîne JSON qui a échoué :", allServerRolesJSON);
                allServerRoles = []; 
                alert("Erreur: Les données des rôles du serveur n'ont pas pu être chargées correctement. Veuillez vérifier la console pour plus de détails.");
            }
            
            if (!Array.isArray(allServerRoles)) {
                allServerRoles = []; 
                console.warn("allServerRoles n'est pas un tableau valide après parsing, initialisation à un tableau vide.");
            }

            // --- GESTION DES ONGLETS ---
            const tabs = document.querySelectorAll('.nav-category');
            const contents = document.querySelectorAll('.tab-content');
            const activateTab = (tabEl) => {
              if(!tabEl) return;
              tabs.forEach(t => t.classList.remove('active'));
              contents.forEach(c => c.classList.remove('active'));
              tabEl.classList.add('active');
              const targetId = tabEl.getAttribute('data-tab');
              const targetContent = document.getElementById(targetId);
              if (targetContent) {
                  targetContent.classList.add('active');
              }
            }
            tabs.forEach(tab => {
                tab.addEventListener('click', (e) => {
                    e.preventDefault(); // Empêche le comportement par défaut du lien (#)
                    activateTab(tab);
                });
            });
            activateTab(document.querySelector('.nav-category.active')); // Active l'onglet initial au chargement

            // --- BARRE DE SAUVEGARDE ---
            const saveBar = document.getElementById('save-bar');
            const showSaveBar = () => {
                if(saveBar) {
                    saveBar.classList.add('visible');
                    document.getElementById('save-status').textContent = 'Des changements non sauvegardés.';
                }
            }
            document.querySelectorAll('form').forEach(form => form.addEventListener('input', showSaveBar));

            // --- LOGIQUE POUR CACHER/AFFICHER LES OPTIONS DES MODULES ---
            const handleModuleToggle = (switchInput) => {
                const parentContainer = switchInput.closest('.settings-box, .module-accordion');
                if (parentContainer) {
                    if (switchInput.checked) {
                        parentContainer.classList.add('is-enabled');
                    } else {
                        parentContainer.classList.remove('is-enabled');
                    }
                }
            };
            document.querySelectorAll('.module-toggle-switch').forEach(switchInput => {
                switchInput.addEventListener('change', () => handleModuleToggle(switchInput));
                // Initialiser l'état au chargement pour tous les interrupteurs
                handleModuleToggle(switchInput); 
            });

            // --- LOGIQUE SÉLECTEUR DE RÔLE (Toutes les fonctions liées sont supprimées) ---
            // Supprimé : searchInput, resultsContainer, selectedContainer, hiddenInput, selectorWrapper
            // Supprimé : updateSelectedDisplay, removeRole, addRole, showResults, et leurs eventListeners

            // --- LOGIQUE DE SAUVEGARDE ---
            const saveButton = document.getElementById('save-button');
            if(saveButton) {
                saveButton.addEventListener('click', async () => {
                    saveButton.disabled = true;
                    saveButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Enregistrement...';
                    document.getElementById('save-status').textContent = 'Enregistrement en cours...';

                    const guildId = window.location.pathname.split('/').pop();
                    const promises = [];
                    document.querySelectorAll('form').forEach(form => {
                        const formName = form.getAttribute('data-form-name');
                        if (!formName) return;
                        let formData = {};
                        // Seul le formulaire 'welcome' est pertinent maintenant
                        if (formName === 'welcome') {
                            formData = {
                                enabled: form.querySelector('[name=welcomeEnabled]')?.checked || false,
                                channelId: form.querySelector('[name=welcomeChannelId]')?.value || '',
                                message: form.querySelector('[name=welcomeMessage]')?.value || '',
                                bannerUrl: form.querySelector('[name=welcomeBannerUrl]')?.value || null,
                            };
                            promises.push(fetch(`/api/settings/${guildId}/${formName}`, { 
                                method: 'POST', 
                                headers: { 'Content-Type': 'application/json' }, 
                                body: JSON.stringify(formData) 
                            }));
                        }
                        // Le formulaire 'autorole' est ignoré
                    });

                    if (promises.length === 0) {
                        document.getElementById('save-status').textContent = 'Aucun paramètre à enregistrer.';
                        if(saveBar) setTimeout(() => saveBar.classList.remove('visible'), 2000);
                        saveButton.disabled = false;
                        saveButton.innerHTML = '<i class="fas fa-save"></i> Enregistrer';
                        return;
                    }

                    try {
                        const responses = await Promise.all(promises);
                        let allSuccess = true;
                        for (const res of responses) {
                            if (!res.ok) {
                                allSuccess = false;
                                const errorData = await res.json(); 
                                throw new Error(`Échec d'une sauvegarde: ${res.status} - ${errorData.message || 'Erreur inconnue.'}`);
                            }
                        }

                        if (allSuccess) {
                            document.getElementById('save-status').textContent = 'Changements enregistrés !';
                            if(saveBar) setTimeout(() => saveBar.classList.remove('visible'), 2000);
                        }
                    } catch (error) {
                        document.getElementById('save-status').textContent = 'Une erreur est survenue lors de l\'enregistrement.';
                        console.error("Erreur de sauvegarde:", error);
                        alert("Erreur lors de l'enregistrement des paramètres : " + error.message);
                    } finally {
                        setTimeout(() => {
                            saveButton.disabled = false;
                            saveButton.innerHTML = '<i class="fas fa-save"></i> Enregistrer';
                        }, 2500);
                    }
                });
            }

            // --- LOGIQUE POUR L'IMPORT D'IMAGE ---
            const bannerInput = document.getElementById('banner-upload-input');
            if (bannerInput) {
                const bannerBase64Input = document.getElementById('banner-base64-input');
                const bannerPreviewContainer = document.getElementById('banner-preview');
                const bannerPreviewImg = bannerPreviewContainer.querySelector('img');

                bannerInput.addEventListener('change', () => {
                    const file = bannerInput.files[0];
                    if (file) {
                        if (file.size > 2 * 1024 * 1024) { // 2MB
                            alert("L'image est trop grande. La taille maximale est de 2 Mo.");
                            bannerInput.value = '';
                            return;
                        }

                        const reader = new FileReader();
                        reader.onload = (e) => {
                            const base64String = e.target.result;
                            if (bannerPreviewImg) {
                                bannerPreviewImg.src = base64String;
                                bannerBase64Input.value = base64String;
                                bannerPreviewContainer.classList.remove('hidden');
                                showSaveBar();
                            }
                        };
                        reader.onerror = () => {
                            console.error("Erreur lors de la lecture du fichier.");
                            alert("Impossible de lire le fichier image.");
                        };
                        reader.readAsDataURL(file);
                    } else {
                        if (bannerPreviewImg) {
                            bannerPreviewImg.src = '';
                            bannerBase64Input.value = '';
                            bannerPreviewContainer.classList.add('hidden');
                            showSaveBar();
                        }
                    }
                });
            }
        });
    </script>
</body>
</html>